import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import csv
import logging
import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_API, RATINGS_FILE, ADDRESSES_FILE
from LLM.answer import generate_response
from collections import Counter
from string import punctuation
from aiogram.types import FSInputFile

STOP_WORDS = set("""
–∏ –≤ –≤–æ –Ω–µ –Ω–∞ —á—Ç–æ –æ–Ω –∫–∞–∫ —Ç–∞–∫ –µ–≥–æ –Ω–æ –≤—Å–µ –æ–Ω–∞ —ç—Ç–æ –±—ã–ª –±—ã—Ç—å –±—ã –∫—Ç–æ –º–Ω–µ –º–Ω–µ —Ç–µ–±–µ —Ç–∞–º —Ç—É—Ç –∏—Ö —á–µ–º –±—ã–ª –±—ã–ª –±—ã 
–µ—Å—Ç—å –Ω–µ—Ç –¥–æ –ª–∏ –≤–µ–¥—å –∂–µ —É–∂ –≤–∞–º –≤–∞—Å –∏–º –µ–º—É –µ–π –º—ã –æ–Ω–∏ –≤—ã –æ–Ω –µ—ë –µ—â—ë –º–µ–∂–¥—É –ø–æ—á–µ–º—É –ø–æ—Ç–æ–º—É —Ç–æ–ª—å–∫–æ –∏–∑ –∑–∞ —á–µ–º –ø–µ—Ä–µ–¥ 
–¥–ª—è –æ —á—Ç–æ–±—ã –µ—Å–ª–∏ –≤—Å–µ —Ç–∞–∫ —Ç–æ –∫–æ–≥–¥–∞ –±—ã–ª–æ –∏–ª–∏ –∏—Ö –∂–µ —ç—Ç–æ —Ç–æ–≥–æ —á—Ç–æ —Ö–æ—Ç—è –ø–æ–¥ –Ω–∞–º –Ω–∏–º–∏ –≥–¥–µ –≥–¥–µ —Å—é–¥–∞ –∑–¥–µ—Å—å """.split() +
"""
the and in is on it at an of for or to not he she we they was were be you your me mine his her their our
this that those these here there when where how why whom by with if then else because too also just only 
about from into over under but yet nor so very can could should would shall """.split())

user_contexts = {}
MAX_CONTEXT_SIZE = 10
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_API)
dp = Dispatcher()
router = Router()
dp.include_router(router)

if not os.path.exists(RATINGS_FILE):
    with open(RATINGS_FILE, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["user_id", "username", "rating"])

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/setaddress"), KeyboardButton(text="/question")],
        [KeyboardButton(text="/start"), KeyboardButton(text="/rate")]
    ],
    resize_keyboard=True
)

keyboard_with_question = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],  
        [KeyboardButton(text="/start"), KeyboardButton(text="/rate"), KeyboardButton(text="/setaddress")]
    ],
    resize_keyboard=True
)

def rating_keyboard():
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.add(InlineKeyboardButton(text=f"‚≠êÔ∏è {i}", callback_data=f"rate:{i}"))
    return builder.as_markup()

def extract_keywords(text: str) -> list:
    words = text.lower().translate(str.maketrans("", "", punctuation)).split()
    keywords = [word for word in words if word not in STOP_WORDS]
    return keywords

def update_user_context(user_id: int, keywords: list):
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    user_contexts[user_id].extend(keywords)
    keyword_counts = Counter(user_contexts[user_id])
    user_contexts[user_id] = [
        word for word, _ in keyword_counts.most_common(MAX_CONTEXT_SIZE)
    ]

async def get_custom_llm_response(prompt: str, user_id: int) -> str:
    try:
        keywords = extract_keywords(prompt)
        update_user_context(user_id, keywords)
        context = " ".join(user_contexts[user_id])        
        enriched_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n–í–æ–ø—Ä–æ—Å: {prompt}"
        response = generate_response(question=enriched_prompt, user_context=context, user_id=user_id)
        return response
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {e}")
        return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

@router.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ. –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "   /start ‚Äî –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "   /rate ‚Äî –û—Ü–µ–Ω–∏—Ç—å –º–æ—é —Ä–∞–±–æ—Ç—É\n"
        "   /setaddress ‚Äî –£–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        "   /question ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–º–æ—á—å –≤–∞–º!",
        reply_markup=keyboard
    )

user_states = {}

def edit_address_keyboard():
    return InlineKeyboardBuilder().add(InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_address")).as_markup()

def get_user_address(user_id: int) -> str:
    try:
        if os.path.exists(ADDRESSES_FILE):
            with open(ADDRESSES_FILE, mode="r", newline="", encoding="utf-8") as file:
                reader = csv.reader(file)
                next(reader)  
                for row in reader:
                    if int(row[0]) == user_id:  
                        return row[2]  
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–¥—Ä–µ—Å–æ–≤: {e}")
    return None

@router.message(Command("setaddress"))
async def set_address(message: Message):
    try:
        current_address = get_user_address(message.from_user.id)
        if current_address:
            await message.answer(
                f"üìç –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: *{current_address}*\n\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'.\n –§–æ—Ä–º–∞—Ç: –≥.–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥–æ–º 60",
                parse_mode="Markdown",
                reply_markup=edit_address_keyboard()
            )
        else:
            user_input = message.text[len("/setaddress "):].strip()
            if not user_input:
                await message.answer("üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n`/setaddress –≥.–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥–æ–º 60`", parse_mode="Markdown")
                return
            if not os.path.exists(ADDRESSES_FILE):
                with open(ADDRESSES_FILE, mode="w", newline="", encoding="utf-8") as file:
                    writer = csv.writer(file)
                    writer.writerow(["user_id", "username", "address"])
            with open(ADDRESSES_FILE, mode="a", newline="", encoding="utf-8") as file:
                writer = csv.writer(file)
                writer.writerow([message.from_user.id, message.from_user.username, user_input])
            await message.answer(f"‚úÖ –í–∞—à –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: *{user_input}*", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

async def update_user_address(user_id: int, new_address: str):
    try:
        if not os.path.exists(ADDRESSES_FILE):
            logging.error("–§–∞–π–ª —Å –∞–¥—Ä–µ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False
        rows = []
        updated = False
        with open(ADDRESSES_FILE, mode="r", newline="", encoding="utf-8") as file:
            reader = csv.reader(file)
            header = next(reader)  
            rows.append(header)
            for row in reader:
                if int(row[0]) == user_id:
                    row[2] = new_address
                    updated = True
                rows.append(row)
        if not updated:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ.")
            return False
        with open(ADDRESSES_FILE, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerows(rows)
        logging.info(f"–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        return False

@router.callback_query(lambda callback: callback.data == "edit_address")
async def edit_address(callback_query):
    try:
        user_states[callback_query.from_user.id] = "editing_address"
        await callback_query.message.answer(
            "üñäÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
                ],
                resize_keyboard=True
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

@router.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_edit(message: Message):
    user_states.pop(message.from_user.id, None)  
    await message.answer(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞.",
        reply_markup=keyboard  
    )

@router.message(lambda message: message.from_user.id in user_states and user_states[message.from_user.id] == "editing_address")
async def handle_new_address(message: Message):
    try:
        user_input = message.text.strip()
        if not user_input:
            await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.")
            return
        success = await update_user_address(message.from_user.id, user_input)
        if success:
            user_states.pop(message.from_user.id, None)  
            await message.answer(f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: *{user_input}*", parse_mode="Markdown")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

@router.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_edit(message: Message):
    await message.answer(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞.",
        reply_markup=keyboard  
    )

@router.message(Command("rate"))
async def rate_bot(message: Message):
    try:
        photo = FSInputFile("us.jpg")
        await message.answer_photo(
            photo=photo,
            caption="‚≠êÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –º–æ—é —Ä–∞–±–æ—Ç—É, –≤—ã–±—Ä–∞–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥–æ—á–µ–∫ –Ω–∏–∂–µ:",
            reply_markup=rating_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

@router.callback_query(lambda callback: callback.data.startswith("rate:"))
async def handle_rating(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username
        rating = int(callback_query.data.split(":")[1])
        existing_ratings = []
        user_rating = None
        try:
            with open(RATINGS_FILE, mode="r", encoding="utf-8") as file:
                reader = csv.reader(file)
                for row in reader:
                    existing_ratings.append(row)
                    if str(user_id) == row[0]:  
                        user_rating = int(row[2])  
        except FileNotFoundError:
            pass  

        if user_rating is not None:
            
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=(
                    f"–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {user_rating} ‚≠êÔ∏è.\n"
                    "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë?"
                ),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"change_rate:{rating}")],
                        [InlineKeyboardButton(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="cancel_change")]
                    ]
                )
            )
        else:
            with open(RATINGS_FILE, mode="a", newline="", encoding="utf-8") as file:
                writer = csv.writer(file)
                writer.writerow([user_id, username, rating])

            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {rating} ‚≠êÔ∏è"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏."
        )

@router.callback_query(lambda callback: callback.data.startswith("change_rate:"))
async def change_rate(callback_query: CallbackQuery):
    try:
        new_rating = int(callback_query.data.split(":")[1])
        user_id = callback_query.from_user.id
        updated_ratings = []
        with open(RATINGS_FILE, mode="r", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                if str(row[0]) == str(user_id):
                    row[2] = str(new_rating)  
                updated_ratings.append(row)
        
        with open(RATINGS_FILE, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerows(updated_ratings)

        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏: {new_rating} ‚≠êÔ∏è"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–∏."
        )

@router.callback_query(lambda callback: callback.data == "cancel_change")
async def cancel_change(callback_query: CallbackQuery):
    try:
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏."
        )

@router.message(Command("question"))
async def ask_question(message: Message):
    await message.answer(
        "‚ùì –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=keyboard_with_question
    )

@router.message(lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_user_question(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[  
                [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]  
            ],
            resize_keyboard=True
        )
    )

@router.message(lambda message: message.text != "–û—Ç–º–µ–Ω–∏—Ç—å")
async def handle_user_question(message: Message):
    try:
        user_input = message.text.strip()
        if not user_input:
            await message.answer("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            return

        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        response = await get_custom_llm_response(user_input, message.from_user.id)
        await message.answer(response)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_question(message: Message):
    await message.answer(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
        reply_markup=keyboard  
    )

@router.message(lambda message: message.from_user.id not in user_states or user_states[message.from_user.id] != "editing_address")
async def handle_message(message: Message):
    user_input = message.text
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    response = await get_custom_llm_response(user_input, message.from_user.id)
    await message.answer(response)

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
